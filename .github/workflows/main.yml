# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup .NET 7.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Set required Powershell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSSCriptAnalyzer, InvokeBuild, platyPS, psake

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}

      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

      - name: Invoke build
        shell: pwsh
        run: |
          $env:psakeDeploy = $true
          Invoke-psake .\PSParquet.psake.ps1 Build

      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'Agazoth'
          git config --global user.email 'axel@riax.dk'
          git remote set-url origin https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -am "Pushing Artifacts"
          git push

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: PSParquet
          path: ./output/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out the main branch
      - uses: actions/checkout@main

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: PSParquet
          path: Artifact/

      - name: Install the module
        run: |
          Write-Host $Env:GITHUB_REF
          $ModuleName = (Get-ChildItem -Path ./Artifact/).Name
          echo "MODULE_NAME=$ModuleName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          Write-Host "Path: $(pwd)"
          Write-Host "ModuleName: $ModuleName"
          ls ./Artifact
          Import-Module ./Artifact/$ModuleName
          Get-Command -Module $ModuleName
        shell: pwsh

      - name: Publish to Powershell Gallery
        run: |
          Publish-Module -Name ./Artifact/$Env:MODULE_NAME -NuGetApiKey ${{ secrets.PSGALLERYKEY }}
        shell: pwsh
